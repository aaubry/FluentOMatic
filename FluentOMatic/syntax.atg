/*
      Copyright 2012 Antoine Aubry
      
      This file is part of FluentOMatic.
  
      FluentOMatic is free software: you can redistribute it and/or modify
      it under the terms of the GNU General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
  
      FluentOMatic is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU General Public License for more details.
  
      You should have received a copy of the GNU General Public License
      along with FluentOMatic.  If not, see <http://www.gnu.org/licenses/>.
*/
COMPILER FluentOMatic

CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  dot = '.'.
  openParen = '('.
  closeParen = ')'.
  star = '*'.
  question = '?'.
  plus = '+'.
  comma = ','.
  string = ANY - '"'.
  lt = '<'.
  gt = '>'.

TOKENS
  dot = dot.
  ident = letter { letter | digit }.
  number = digit { digit }.
  openParen = openParen.
  closeParen = closeParen.
  zeroOrMany = star.
  zeroOrOne = question.
  oneOrMany = plus.
  parameterSep = comma.
  syntax = "syntax".
  string = "\"" { string } "\"".
  using = "using".
  endOfUsing = ";".
  genericArgListStart = lt.
  genericArgListEnd = gt.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

PRODUCTIONS

FluentOMatic =									(. Syntax = new FluentSyntax(); .)
												(. string syntaxName; string[] args; .)
  SyntaxName<out syntaxName, out args>			(. Syntax.Name = syntaxName; Syntax.GenericArguments = args; .)
												(. SUsingList usings; .)
  UsingList<out usings>							(. Syntax.Usings.AddRange(usings); .)
												(. SOperationList operations; .)
  OperationList<out operations>					(. Syntax.Operations.AddRange(operations); .)
  .

SyntaxName<out string name, out string[] args> =
  syntax										(. args = new string[0]; .)
  ident											(. name = t.val; .)
  [
    GenericArgumentList<out args>
  ]
  .

GenericArgumentList<out string[] args> =		(. args = null; .)
  genericArgListStart							(. var list = new List<string>(); .)
  ident											(. list.Add(t.val); .)
  {
    parameterSep
    ident										(. list.Add(t.val); .)
  }
  genericArgListEnd								(. args = list.ToArray(); .)
  .

Using<out SUsing result> =						(. result = new SUsing(); .)
  using
  ident											(. result.Namespace = t.val; .)
  {
	dot
	ident										(. result.Namespace += "." + t.val; .)
  }
  endOfUsing.

UsingList<out SUsingList result> =				(. result = new SUsingList(); .)
  {												(. SUsing u; .)
	Using<out u>								(. result.Add(u); .)
  }.

Operation<out SOperation result> =				(. result = new SOperation(); .)
  dot
  ident											(. result.Name = t.val; .)
  openParen

  [												(. SParameterList parameters; .)
	ParameterList<out parameters>				(. result.Parameters.AddRange(parameters); .)
  ]
  [												(. SOperationList operations; .)
	OperationList<out operations>				(. result.Operations.AddRange(operations); .)
  ]

  closeParen
  [
	zeroOrOne									(. result.Multiplicity = SMultiplicity.ZeroOrOne; .)
	| zeroOrMany								(. result.Multiplicity = SMultiplicity.ZeroOrMany; .)
	| oneOrMany									(. result.Multiplicity = SMultiplicity.OneOrMany; .)
  ].

OperationList<out SOperationList result> =		(. result = new SOperationList(); .)
												(. SOperation operation; .)
  Operation<out operation>						(. result.Add(operation); .)
  {
	Operation<out operation>					(. result.Add(operation); .)
  }.

Parameter<out SParameter result> =				(. result = new SParameter(); .)
  (
	string										(. result.Type = t.val.Trim('"'); .)
	| ident										(. result.Type = t.val; .)
  )
  ident											(. result.Name = t.val; .)
  .

ParameterList<out SParameterList result> =		(. result = new SParameterList(); .)
												(. SParameter parameter; .)
  Parameter<out parameter>						(. result.Add(parameter); .)
  {
	parameterSep
	Parameter<out parameter>					(. result.Add(parameter); .)
  }.

END FluentOMatic.
